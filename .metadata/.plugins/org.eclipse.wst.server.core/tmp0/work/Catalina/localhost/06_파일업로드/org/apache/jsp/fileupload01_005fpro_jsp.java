/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.40
 * Generated at: 2025-05-13 01:24:05 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import java.nio.charset.StandardCharsets;
import java.io.*;
import java.util.*;
import org.apache.commons.fileupload2.jakarta.*;
import org.apache.commons.fileupload2.core.*;

public final class fileupload01_005fpro_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(10);
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("java.io");
    _jspx_imports_packages.add("org.apache.commons.fileupload2.jakarta");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_packages.add("org.apache.commons.fileupload2.core");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(2);
    _jspx_imports_classes.add("java.nio.charset.StandardCharsets");
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

	// 파일 업로드 경로
	String uploadPath = "C:/upload/";
	File uploadDir = new File(uploadPath); // 해당 경로에 대한 File 객체 생성
	
	// 해당 경로가 존재하지 않으면 폴더 생성
	if( !uploadDir.exists()) {
		uploadDir.mkdirs();
	}
	
	// 클라이언트 요청의 문자 인코딩 설정
	request.setCharacterEncoding("UTF-8");
	
	// 임시 파일 저장 경로 설정
	File repository = new File( System.getProperty("java.io.tmpdir") );
	
	// FileItemFactory 설정 : 업로드된 항목을 생성하는 팩토리 객체
	FileItemFactory<DiskFileItem> factory = DiskFileItemFactory
				.builder().setFile(repository).get();
	
	// Servlet 기반 파일 업로드 객체 생성
	JakartaServletFileUpload<DiskFileItem, FileItemFactory<DiskFileItem>>
	upload = new JakartaServletFileUpload<>(factory);
	
	// request 를 변환하기 위한 Context 객체 생성
	JakartaServletRequestContext context = new JakartaServletRequestContext(request);
	
// 	List<DiskFileItem> items = upload.parseRequest(context);
// 	Iterator<DiskFileItem> params = items.iterator();
	
	try {
		// 요청에서 form field 및 파일을 변환하여 리스트로 가져옴
		List<DiskFileItem> items = upload.parseRequest(context);
		
		for( DiskFileItem item : items ) {
			// 텍스트 필드인 경우
			if (item.isFormField() ) {
				String name = item.getFieldName();
				String value = item.getString(StandardCharsets.UTF_8);
				out.println(name + " : " + value + "<br>");
			}
			// 파일 필드인 경우
			else {
				String fieldName = item.getFieldName(); // 필드 이름
				String fileName = item.getName();		// 파일 이름
				// 업로드 파일 이름
				String uploadedName = System.currentTimeMillis() + "_" + fileName;
				
				// 파일명이 비어있지 않으면
				if( fileName != null && !fileName.isEmpty() ) {
					// 저장할 파일 객체 생성
					File uploadedFile = new File(uploadDir, uploadedName);
					try (
						InputStream is = item.getInputStream();
						FileOutputStream fos = new FileOutputStream(uploadedFile);
					){
						// 파일 저장
						is.transferTo(fos);
						
						// 업로드 결과 출력
						out.println("=======================================<br>");
						out.println("필드 이름 : " + fieldName + "<br>");
						out.println("원본 파일명 : " + fileName + "<br>");
						out.println("저장 파일명 : " + uploadedName + "<br>");
						out.println("타입 : " + item.getContentType() + "<br>");
						out.println("경로 : " + uploadedFile.getAbsolutePath() + "<br>");
						out.println("크기 : " + uploadedName.length() + "<br>");
					} catch(Exception e) {
						e.printStackTrace();
					}
				}
				
			}
			
			
		}
	} catch(Exception e) {
		e.printStackTrace();
	}
	
	
	
	
	
	
	

    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
